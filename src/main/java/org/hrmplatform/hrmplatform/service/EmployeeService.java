package org.hrmplatform.hrmplatform.service;

import lombok.AllArgsConstructor;
import org.hrmplatform.hrmplatform.dto.request.EmployeeRequestDto;
import org.hrmplatform.hrmplatform.dto.request.EmployeeUpdateDto;
import org.hrmplatform.hrmplatform.dto.response.EmployeeResponseDto;
import org.hrmplatform.hrmplatform.entity.Company;
import org.hrmplatform.hrmplatform.entity.Employee;
import org.hrmplatform.hrmplatform.exception.EmployeeNotFoundException;
import org.hrmplatform.hrmplatform.exception.ErrorType;
import org.hrmplatform.hrmplatform.mapper.EmployeeMapper;
import org.hrmplatform.hrmplatform.repository.EmployeeRepository;
import org.hrmplatform.hrmplatform.util.PaginationUtil;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
@AllArgsConstructor
public class EmployeeService {
    private final EmployeeRepository employeeRepository;
    private final EmailService emailService;
    private final CompanyService companyService;
    private final EmployeeMapper employeeMapper;

    /**
     * TÃ¼m Ã§alÄ±ÅŸanlarÄ± getirir (sayfalama eklenmiÅŸtir).
     * VeritabanÄ±nÄ± yormamak iÃ§in sayfalama kullanÄ±yoruz.
     */
    public List<Employee> getAllEmployees(int page, int size) {
        List<Employee> allEmployees = employeeRepository.findAll(); // TÃ¼m Ã§alÄ±ÅŸanlarÄ± Ã§ekiyoruz
        return PaginationUtil.paginate(allEmployees, page, size); // Sayfalama iÅŸlemini uyguluyoruz
    }

    public EmployeeResponseDto createEmployee(EmployeeRequestDto request) {
        Company company = companyService.findByCompanyId(request.companyId())
                .orElseThrow(() -> new IllegalArgumentException("Company not found with ID: " + request.companyId()));

        Employee employee = Employee.builder()
                .companyId(company.getId())
                .name(request.name())
                .surname(request.surname())
                .email(request.email())
                .phone(request.phone())
                .position(request.position())
                .isActive(false)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();

        Employee savedEmployee = employeeRepository.save(employee);

        // **Manuel Mapping**
        return new EmployeeResponseDto(
                savedEmployee.getId(),
                company.getName(), // Åžirket adÄ±nÄ± ekledik
                savedEmployee.getName() + " " + savedEmployee.getSurname(), // fullName = name + surname
                savedEmployee.getEmail(),
                savedEmployee.getPhone(),
                savedEmployee.getPosition(),
                savedEmployee.isActive()
        );
    }


    /**
     * Mevcut bir Ã§alÄ±ÅŸanÄ± gÃ¼nceller.
     * Ã‡alÄ±ÅŸan bulunamazsa hata dÃ¶ndÃ¼rÃ¼lÃ¼r.
     */
    public void updateEmployee(Long id, EmployeeUpdateDto employeeDetails) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new EmployeeNotFoundException(ErrorType.EMPLOYEE_NOT_FOUND));

        // ðŸ”¹ Mapper kullanarak sadece null olmayan deÄŸerleri gÃ¼ncelle
        employeeMapper.Instance.updateEmployeeFromDto(employeeDetails, employee);

        Employee updatedEmployee = employeeRepository.save(employee);

    }


    /**
     * Ã‡alÄ±ÅŸanÄ± veritabanÄ±ndan siler.
     */
    public void deleteEmployee(Long id) {
        Employee employee = employeeRepository.findById(id).orElseThrow(() -> new RuntimeException("Employee not found"));
        employeeRepository.delete(employee);
    }

    /**
     * Ã‡alÄ±ÅŸanÄ±n aktiflik durumunu deÄŸiÅŸtirir.
     * GÃ¼ncelleme yapÄ±ldÄ±ktan sonra kayÄ±t edilir ve e-posta gÃ¶nderilir.
     */
    public Employee changeEmployeeStatus(Long id) {
        Employee employee = employeeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Employee not found"));

        boolean newStatus = !employee.isActive(); // Durumu tersine Ã§evir
        employee.setActive(newStatus);
        employee.setUpdatedAt(LocalDateTime.now());

        // E-posta iÃ§eriÄŸini belirle
        String subject = newStatus ? "HesabÄ±nÄ±z Aktif Edildi" : "HesabÄ±nÄ±z Devre DÄ±ÅŸÄ± BÄ±rakÄ±ldÄ±";
        String message = newStatus ?
                "Merhaba " + employee.getName() + ",\n\nHesabÄ±nÄ±z tekrar aktif hale getirildi. ArtÄ±k platformu kullanabilirsiniz." :
                "Merhaba " + employee.getName() + ",\n\nHesabÄ±nÄ±z devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±. LÃ¼tfen yÃ¶neticinizle iletiÅŸime geÃ§in.";

        // E-posta gÃ¶nder
        emailService.sendEmail(employee.getEmail(), subject, message);

        return employeeRepository.save(employee);
    }
}
